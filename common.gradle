android.compileSdkVersion 23
android.buildToolsVersion '23.0.1'

android.defaultConfig {
    minSdkVersion 14
    targetSdkVersion 23
    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
}

android.compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
}

// For the Flurry SDK
android.testOptions.unitTests.all {
    // configure the test JVM arguments
    jvmArgs '-noverify'
}

android.packagingOptions {
    exclude '.readme'
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/dependencies'
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/dependencies.txt'
    exclude 'META-INF/LGPL2.1'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/license'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/license.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/notice'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/notice.txt'
    exclude 'META-INF/README.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
}

android.lintOptions {
    abortOnError false
    checkAllWarnings true
}

task jacocoReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // "gradle dependencies" - shows configurations
    // "jacocoAgent/jacocoAnt" and "androidJacocoAgent/androidJacocoAnt"
    // The Android version is a newer version
    // Use hidden configuration, for details look into JacocoPlugin.groovy
    jacocoClasspath = configurations['androidJacocoAnt']

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: projectDir, includes: ['**/*.exec'])
}
