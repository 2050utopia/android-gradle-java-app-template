buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        // android gradle plugin
        classpath 'com.android.tools.build:gradle:1.3.1'
        // android command plugin
        classpath 'com.novoda:gradle-android-command-plugin:1.5.0'
        // static analysis
        classpath 'com.noveogroup.android:check:1.1.2'
        // publish to google play store
        classpath 'com.github.triplet.gradle:play-publisher:1.1.2'
        // check for plugin updates
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
        // code coverage
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        mavenCentral()
        jcenter()
    }

    // Specify latest jacoco, else use default
    jacoco {
        version '0.7.5.201505241946'
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7

        // report all Java errors even if the IDE does not
        configure(options) {
            compilerArgs << '-Xlint:all' << '-Xlint:-options'
            deprecation = true
            encoding = 'UTF-8'
        }
    }

    // print errors from test in the terminal
    tasks.withType(Test) {
        testLogging {
            exceptionFormat 'full'
        }
    }
}

configure(project(':example').subprojects) {
    apply plugin: 'com.android.application'
    apply plugin: 'android-command'
    apply plugin: 'com.github.triplet.play'
    apply plugin: 'com.noveogroup.android.check'

    android {
        compileSdkVersion 23
        buildToolsVersion '23.0.0'
        useLibrary 'org.apache.http.legacy'

        defaultConfig {
            applicationId 'burrows.apps.example.template'
            minSdkVersion 9
            targetSdkVersion 23
            versionCode 1
            versionName '1.0'
            // for espresso tests
            testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        }

        // JNI support - must run ndk-build
        sourceSets {
            main {
                jni {
                    srcDirs = []
                }

                jniLibs {
                    srcDir 'src/main/libs'
                }
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        signingConfigs {
            debug {
                storeFile rootProject.file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.debug
            }
        }

        lintOptions {
            abortOnError false
        }
    }

    // publishing to google play
    // https://developers.google.com/android-publisher/getting_started
    play {
        serviceAccountEmail = 'jaredsburrows@gmail.com'
        pk12File = file('key.p12')
        track = 'production' // or 'beta' or 'alpha'
    }

    dependencies {
        // Android Support Library for AppCompat
        compile 'com.android.support:appcompat-v7:23.0.0'

        // Android Support Library for the CardView
        compile 'com.android.support:cardview-v7:23.0.0'

        // Android Support Library for the RecyclerView
        compile 'com.android.support:recyclerview-v7:23.0.0'

        // Google Play Services - Ads
        compile 'com.google.android.gms:play-services-ads:7.5.0' // 7.8.0



        // Espresso Instrumentation Testing
        androidTestCompile 'com.android.support:support-annotations:23.0.0'
        androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
        androidTestCompile 'com.android.support.test:testing-support-lib:0.1'



        // Fixes for Linux and Mac
        testCompile 'org.apache.maven:maven-ant-tasks:2.1.3'

        // Junit
        testCompile 'junit:junit:4.12'

        // Hamcrest Matchers for Junit
        testCompile 'org.hamcrest:hamcrest-integration:1.3'

        // Mockito
        testCompile 'org.mockito:mockito-core:2.0.31-beta'

        // EasyMock
        testCompile 'org.easymock:easymock:3.3.1'

        // PowerMock
        testCompile 'org.powermock:powermock-core:1.6.2'
        testCompile 'org.powermock:powermock-module-junit4:1.6.2'

        // PowerMock + EasyMock extension
        testCompile 'org.powermock:powermock-api-easymock:1.6.2'

        // Robolectric + Support v4
        testCompile 'org.robolectric:shadows-play-services:3.0'
        testCompile 'org.robolectric:shadows-support-v4:3.0'
    }

    // JaCoCo Test Reports, thanks to Nenick
    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
        group = 'Reporting'
        description = 'Generate Jacoco coverage reports after running tests.'

        reports {
            xml {
                enabled true // coveralls
                destination "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
            }

            html {
                enabled true
                destination "${project.buildDir}/reports/jacoco/test/html"
            }
        }

        // use hidden configuration, for details look into JacocoPlugin.groovy
        jacocoClasspath = project.configurations['androidJacocoAnt']

        // exclude auto-generated classes and tests
        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*',
                          'android/**/*.*']
        def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories = files([mainSrc])
        classDirectories = files([debugTree])
        executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
    }
}
